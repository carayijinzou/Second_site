<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bioinformatics | Cara (Yijin) Zou</title>
    <link>/tag/bioinformatics/</link>
      <atom:link href="/tag/bioinformatics/index.xml" rel="self" type="application/rss+xml" />
    <description>Bioinformatics</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 18 Jul 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Bioinformatics</title>
      <link>/tag/bioinformatics/</link>
    </image>
    
    <item>
      <title>Greedy Algorithm and Sequence Assembly</title>
      <link>/post/greedy_algorithm/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/greedy_algorithm/</guid>
      <description>


&lt;p&gt;This post is used to illustrate a simple version of implementing the greedy algorithm for sequence assembly in python. Please keep in mind that there are many more complex and robust ways.&lt;/p&gt;
&lt;div id=&#34;greedy-algorithm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Greedy Algorithm&lt;/h2&gt;
&lt;p&gt;Unlike other algorithms such as brute force of dynamic programming, the greedy algorithm may &lt;strong&gt;NOT&lt;/strong&gt; always give the optimum solution. Instead, it looks at the best short term gain without consideration for the end result. One example of an algorithm that uses the Greedy algorithm is Kruskal’s algorithm (Minimum Spanning Tree), however, in this case, it does give the optimal solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sequencing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sequencing&lt;/h2&gt;
&lt;p&gt;One important tool used in biology is the sequencing of genetic data. There are various types of sequencing including sanger sequencing, illumina, nanopore, etc. Because techniques can be limited by read length, sometimes an original sequence/genome is fragmented, sequenced, and then assembled together again into a “contig” sequence (shot gun sequencing).&lt;/p&gt;
&lt;p&gt;For example, given the following:&lt;/p&gt;
&lt;p&gt;Genome: ATTCGTAGCA&lt;/p&gt;
&lt;p&gt;Copy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ATTCGTAGCA

  ATTCGTAGCA
  
  ATTCGTAGCA
  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fragmentation:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Frag1&lt;/th&gt;
&lt;th&gt;Frag2&lt;/th&gt;
&lt;th&gt;Frag3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ATT&lt;/td&gt;
&lt;td&gt;CGTA&lt;/td&gt;
&lt;td&gt;GCA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ATTC&lt;/td&gt;
&lt;td&gt;GTA&lt;/td&gt;
&lt;td&gt;GCA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;AT&lt;/td&gt;
&lt;td&gt;TCGT&lt;/td&gt;
&lt;td&gt;AGCA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;limitations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;p&gt;The shorter the reads, the harder it is to piece together (sometimes unsolvable). Another important factor to consider is if the original sequence has a lot of repeats such as &lt;em&gt;ATTAATTAA&lt;/em&gt; which will cause it to fail. We also have to assume that the sequence read was perfect (no errors in the reading of the base) and that all reads are bridged (there is some overlap).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Also, get all unique sequences (duplicates don’t offer more information)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sequence-assembly-using-the-greedy-algorithm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sequence Assembly Using the Greedy Algorithm&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Search for overlaps and where you can extend this. If there is more than 1 sequence that overlaps, find the sequence overlap with the highest area of overlap.&lt;/li&gt;
&lt;li&gt;Find two fragments with largest overlap and merge fragments.&lt;/li&gt;
&lt;li&gt;Repeat until only 1 fragment is left.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following program was used to find the highest number of overlapping characters in two sequences, making sure that the match isn’t in the middle of the two sequences such as “AT&lt;strong&gt;GCG&lt;/strong&gt;TA” and “GAC&lt;strong&gt;GCG&lt;/strong&gt;GGC”. Keep in mind that this program finds overlaps with the potential of left overhangs on the first sequence and right overhangs on the second sequence and &lt;strong&gt;NOT&lt;/strong&gt; vice versa. For example: “AGC&lt;strong&gt;TTA&lt;/strong&gt;” and “&lt;strong&gt;TTA&lt;/strong&gt;CCC”.
&lt;em&gt;(Probably not the most efficient way of doing it)&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def find_high_overlap(string1_original, string2_original):
  
  string1 = string1_original 
  string2= (len(string1_original)-1)* &amp;quot; &amp;quot; + string2_original 
  
  highest_overlap=0
  
  for k in range (len(string1_original)):
    overlap_num=0
    #check individual characters to see if they match 
    for i in range(len(string1)):
      overlap_num=0
      if string1[i]==string2[i]:
        for w in range(i, len(string1)):
            if string1[w]==string2[w]:
              overlap_num+=1
            else:
                overlap_num=0
                break
      #if the match is in the middle of the sequences
      elif string1[i]!=&amp;quot; &amp;quot; and string2[i]!=&amp;quot; &amp;quot;:
          overlap_num=0
          break
      if overlap_num &amp;gt; highest_overlap:
        highest_overlap = overlap_num
    if overlap_num &amp;gt; highest_overlap:
      highest_overlap = overlap_num
    string2= string2[1:]+&amp;quot; &amp;quot;
  
  return (highest_overlap)

find_high_overlap(&amp;quot;ATGGCGAGC&amp;quot;,&amp;quot;GAGCATGGCGAGC&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;find_high_overlap(&amp;quot;GAGCATGGCGAGC&amp;quot;,&amp;quot;ATGGCGAGCCCAA&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, so now that we have a way of determining the repeats, now what? We need to build a n by n &lt;strong&gt;matrix&lt;/strong&gt; where &lt;em&gt;n&lt;/em&gt; is the number of fragments that we have. The value in the &lt;em&gt;i&lt;/em&gt; th row and &lt;em&gt;j&lt;/em&gt; th column is the overlap between the &lt;em&gt;i&lt;/em&gt; th fragment and the &lt;em&gt;j&lt;/em&gt; th fragment. Ignoring the diagonal from the top left to the bottom right, find the highest overlap (obviously a sequence will have the most overlap with itself). Once you find the two with the highest overlap (if more than two pairs, randomly pick a pair), merge/extend the pair into one fragment and change your matrix so that you have a n-1 by n-1 &lt;strong&gt;matrix&lt;/strong&gt;. Continue doing this until there is only 1 fragment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is NOT the only way of solving this problem. As found in the references, you can also use an overlap graph for example,where the node represents the fragment and the edge represents the number of highest overlap.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before actually using the greedy algorithm to solve this problem, we must first build a program that merges two fragments together:
&lt;em&gt;This will assume that the overlap was found with the program above– no overlapping only in the middle of the two sequences, left overhangs on the first sequence, and right overhangs on the second sequence.&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def merge(string1_original, string2_original, found_overlap):
  
  string1 = string1_original 
  string2= (len(string1_original)-1)* &amp;quot; &amp;quot; + string2_original 
  
  for k in range (len(string1_original)):
    overlap_num=0
    #check individual characters to see if they match 
    for i in range(len(string1)):
      overlap_num=0
      if string1[i]==string2[i]:
        for w in range(i, len(string1)):
            if string1[w]==string2[w]:
              overlap_num+=1
            else:
                overlap_num=0
                break
        if overlap_num == found_overlap:
          #count the number of left spaces in the second sequence
          spaces=0
          for j in range(len(string2)): 
            if string2[j]==&amp;quot; &amp;quot;:
              spaces+=1
            else:
              break
          merged_String= string1[:spaces]+string2[spaces:]
          
          return (merged_String.strip())
    string2= string2[1:]+&amp;quot; &amp;quot;

merge(&amp;quot;ATGGCGAGC&amp;quot;,&amp;quot;GAGCATGGCGAGC&amp;quot;, 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;ATGGCGAGCATGGCGAGC&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;merge(&amp;quot;GAGCATGGCGAGC&amp;quot;,&amp;quot;ATGGCGAGCCCAA&amp;quot;, 9)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;GAGCATGGCGAGCCCAA&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s actually make the matrix:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def no_merges(matrix_1): 
  for row in range(len(matrix_1)):
    for col in range(len(matrix_1)):
      if matrix_1[row][col]&amp;gt;0: 
        return False
  return True 


def sequence_assembly(frag_list): 
  #keep looping until only one fragment is left 
  for frag in range(len(frag_list)-1): 
    seq_matrix = []
    for item in frag_list:  
      seq_matrix.append(len(frag_list) * [0])
    
    for row in range(len(seq_matrix)): 
      for col in range(len(seq_matrix)):
        #the diagonal is how much it overlaps with itself (not useful)
        if row==col: 
          seq_matrix[row][col]=-1
        else: 
          seq_matrix[row][col]=find_high_overlap(frag_list[row], frag_list[col])
    
    print(&amp;quot;Matrix after&amp;quot;, frag, &amp;quot;merges&amp;quot;)
    prettyPrint(seq_matrix)
    if no_merges(seq_matrix)==True: 
      print(&amp;quot;Cannot merge all&amp;quot;)
      return(frag_list)
    #find the highest overlap (if they overlap the same amount, this code just takes the first one it encounters)
    highest= [0]
    for i in range(len(seq_matrix)):
      for j in range(len(seq_matrix)):
        if seq_matrix[i][j]&amp;gt; highest[0]:
          highest[0]=seq_matrix[i][j]
          if len(highest)&amp;gt;1:
            highest[1]=i
            highest[2]=j
          else: 
            highest.extend([i,j])
    #print(highest)
    seq1=frag_list[highest[1]]
    seq2=frag_list[highest[2]]
    
    frag_list.append(merge(seq1,seq2, highest[0]))
    frag_list.remove(seq1)
    frag_list.remove(seq2)
    
  return (frag_list)

frag_list=[&amp;quot;GAGCATGGCGAGC&amp;quot;,&amp;quot;ATGGCGAGCCCAA&amp;quot;,&amp;quot;ATGGCGAGC&amp;quot;,&amp;quot;CAATGCACCA&amp;quot;]
sequence_assembly(frag_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Matrix after 0 merges
##   -1     9     9     1  
##    0    -1     1     3  
##    4     9    -1     1  
##    0     1     1    -1  
## 
## Matrix after 1 merges
##   -1     1     4  
##    1    -1     0  
##    1     3    -1  
## 
## Matrix after 2 merges
##   -1     1  
##    3    -1  
## 
## [&amp;#39;ATGGCGAGCATGGCGAGCCCAATGCACCA&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;frag_list_2=[&amp;quot;ATGGCGAGC&amp;quot;,&amp;quot;CAATGCACCA&amp;quot;, &amp;quot;GAGCATGGCGAGC&amp;quot;,&amp;quot;ATGGCGAGCCCAA&amp;quot;]
sequence_assembly(frag_list_2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Matrix after 0 merges
##   -1     1     4     9  
##    1    -1     0     1  
##    9     1    -1     9  
##    1     3     0    -1  
## 
## Matrix after 1 merges
##   -1     0     1  
##    1    -1     9  
##    3     0    -1  
## 
## Matrix after 2 merges
##   -1     0  
##    3    -1  
## 
## [&amp;#39;GAGCATGGCGAGCCCAATGCACCA&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As demonstrated in the above example, the following fragments: “GAGCATGGCGAGC”,“ATGGCGAGCCCAA”,“ATGGCGAGC”,“CAATGCACCA” can be used to form the longer sequence. However, depending on the order of the sequences submitted, the resulting longer sequence can be different: ‘ATGGCGAGCATGGCGAGCCCAATGCACCA’, ‘GAGCATGGCGAGCCCAATGCACCA’, etc. Why? Because as stated previously, if there is more than 1 pair of sequences that overlap the highest number of character overlaps, my program takes the first one it encounters–therefore order matters in this case.&lt;/p&gt;
&lt;p&gt;There may also be cases where the greedy algorithm cannot merge all of the fragments into one:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sequence_assembly([&amp;quot;ACGGAAATAC&amp;quot;, &amp;quot;ATCAGGT&amp;quot;, &amp;quot;GGTAAAG&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Matrix after 0 merges
##   -1     0     0  
##    0    -1     3  
##    0     0    -1  
## 
## Matrix after 1 merges
##   -1     0  
##    0    -1  
## 
## Cannot merge all
## [&amp;#39;ACGGAAATAC&amp;#39;, &amp;#39;ATCAGGTAAAG&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;AN INTRODUCTION TO BIOINFORMATICS ALGORITHMS, NEIL C. JONES AND PAVEL A. PEVZNER&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://data-science-sequencing.github.io/Win2018/lectures/lecture6/#&#34; class=&#34;uri&#34;&gt;http://data-science-sequencing.github.io/Win2018/lectures/lecture6/#&lt;/a&gt;:~:text=The%20greedy%20algorithm%20assembles%20the%20reads%20into%20an%20incorrect%20DNA,greedy%20approach%20can%20still%20fail.&amp;amp;text=One%20can%20think%20of%20the,looking%20for%20length%2D%E2%84%93%20overlaps.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/biology/7-91j-foundations-of-computational-and-systems-biology-spring-2014/lecture-slides/MIT7_91JS14_Lecture6.pdf&#34; class=&#34;uri&#34;&gt;https://ocw.mit.edu/courses/biology/7-91j-foundations-of-computational-and-systems-biology-spring-2014/lecture-slides/MIT7_91JS14_Lecture6.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>PAX9 Variants Random Forest Model</title>
      <link>/project/pax9_rf/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <guid>/project/pax9_rf/</guid>
      <description>
&lt;SCRIPT language=&#34;JavaScript&#34;&gt;
&lt;!--hide

var password;

var pass1=&#34;gnomadclinvarcbioportal&#34;;

password=prompt(&#39;Please enter your password to view this page!&#39;,&#39; &#39;);

if (password==pass1)
  {
  alert(&#39;Password correct! Click OK to enter!&#39;);
  }
else
   {
    alert(&#39;Uh oh! You don\&#39;t have access to this page. If you think this is a mistake, please contact me.&#39;);
    window.location=&#34;https://carayijinzou.netlify.app/#contact&#34;;
    }

//--&gt;
&lt;/SCRIPT&gt;



&lt;div id=&#34;predicting-the-effect-of-pax9-variants-using-a-random-forest-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Predicting the Effect of PAX9 variants using a Random Forest Model&lt;/h2&gt;
&lt;div id=&#34;abstract&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Abstract&lt;/h3&gt;
&lt;p&gt;Pax9 is a gene belonging to the family of paired-box genes that encode transcription factors involved in organogenesis. Defects in Pax9 can lead to various types of cancer as well as a condition known as oligodontia which causes missing teeth in individuals. A random forest model was used to predict the phenotypic effect of variants of PAX9. Features that were used include: location of mutation, type of mutation, CADD score, protein change (BLOSUM80 score), and in-frame/out of frame mutation. A 10-fold cross validation was conducted to ensure that the model was not overfitting. The resulting random forest model had an 84.0% prediction accuracy, in which the sensitivity was 89.5%, the specificity was 90.9%, and the precision was 89.5%. However, due to the small size of the available data there are many limitations to the model and involving other features such as other gene interactions would be a major direction of future research on the PAX9 gene.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introductionbackground&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction/Background&lt;/h3&gt;
&lt;p&gt;The PAX9 gene belongs to the family of paired box genes (PAX), which are highly conserved across species. It is located on chromosome 14 and codes for a transcription factor which plays a key role in fetal development. Mutations in the PAX9 gene can lead to different types of cancers (especially lung cancer) as well as oligodontia, a congenital defect of more than 6 missing teeth, especially the molars.The members of the PAX gene family usually consist of a paired-type homeodomain, an octapeptide and a paired box domain. The paired box domain is responsible for binding to DNA to facilitate transcription and is one of our major interests to examine whether a mutation in the gene encoding this structure can be an indication of potential cancer or tooth agenesis phenotype. There are five exons that make up the gene transcript for PAX9. The two most important exons for our project include exon 2 (37130902-37131298), which contains four nucleotides including the start codon, as well as exon 3 (37132102-37132728) which contains the majority of the paired box domain.&lt;/p&gt;
&lt;p&gt;The features used by the random forest model includes: location of mutation, type of mutation, CADD score, protein change (BLOSUM80 score), and in-frame/out of frame mutation. The location of the mutation was important because preliminary analysis using a chi-squared test determined that the location of the mutation (in the paired box region or not) is not independent to whether an individual exhibits oligodontia. Additionally, many of the features were chosen based on known biological information of genes/proteins. Type of mutation and in frame/out of frame mutation were chosen because synonymous mutations are likely to have little deleterious effect while missense and nonsense mutations are likely to cause a more significant effect on the gene product. Insertions and deletions are likely to cause the most effect on the gene since this can cause a frameshift and thus affect all subsequent amino acids. The effect of the protein change was quantified using a higher valued BLOSUM (BLOSUM80) which is used for closely related sequences as some amino acid changes are more detrimental than others. Finally, CADD score was used as it has a similar objective to our model (predicting the effect of variants) and including other similar models will hopefully improve the ability of our model.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;objective&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Objective&lt;/h3&gt;
&lt;p&gt;Utilizing a random forest to classify whether a PAX9 gene variant is pathogenic with the gene data from ClinVar, cBioPortal and gnomAD.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-sources&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data Sources&lt;/h3&gt;
&lt;p&gt;The pathogenic variants were found using cBioPortal (&lt;a href=&#34;https://www.cbioportal.org/&#34; class=&#34;uri&#34;&gt;https://www.cbioportal.org/&lt;/a&gt;) which contained known variants that cause cancer. Pathogenic variants were also identified from the ClinVar database (&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/clinvar/&#34; class=&#34;uri&#34;&gt;https://www.ncbi.nlm.nih.gov/clinvar/&lt;/a&gt;) which consists of variants and their corresponding phenotype/condition. ClinVar largely contained variants that resulted in tooth agenesis. If the clinical significance was labelled as “benign” or “likely benign”, they were excluded from the positive variants dataset. It must be noted that there is a risk using ClinVar since there are more lenient standards for submitting data onto the database.&lt;/p&gt;
&lt;p&gt;The negative variants were extracted from gnomAD (&lt;a href=&#34;https://gnomad.broadinstitute.org/&#34; class=&#34;uri&#34;&gt;https://gnomad.broadinstitute.org/&lt;/a&gt;) which is an aggregation of genome sequencing data. Although variants from individuals that are affected by severe pediatric disease as well as their first degree relatives were removed, there may still be some individuals affected by severe disease still included. Therefore, this is not a true reference set of alleles. To remove some known disease variants, any overlap between gnomAD and the pathogenic variants were removed from the gnomAD dataset provided that the allele frequency was less than 0.05.&lt;/p&gt;
&lt;p&gt;All variants were relative to the GRCh37 reference genome (NG_013357.1).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;computational-methods&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Computational Methods&lt;/h3&gt;
&lt;p&gt;Various R packages were used including ‘tidyverse’ and ‘ggplot2’ for manipulating the data as well as ‘peptider’ which contained the BLOSUM80 matrix. The ‘randomForest’ package provided the model for machine learning.&lt;/p&gt;
&lt;p&gt;The Ensembl Variant Effect Predictor (VEP) was used to obtain the protein consequence for the ClinVar data while the other two datasets already included protein consequence. A VCF file was produced using the results of VEP and was used to obtain the PHRED score from Combined Annotation Dependent Depletion (&lt;a href=&#34;https://cadd.gs.washington.edu/&#34; class=&#34;uri&#34;&gt;https://cadd.gs.washington.edu/&lt;/a&gt;) which predicts the deleteriousness of a single nucleotide change as well as insertions and deletions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Results&lt;/h3&gt;
&lt;div id=&#34;variant-selection&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Variant Selection&lt;/h5&gt;
&lt;p&gt;Since there are a lot more variants from gnomAD that are neutral phenotype compared to the number of pathogenic variants, an unbalanced data would form if all of the datasets were included. To combat this, we sampled an equal number of variants that are diseased/not diseased each time we trained our model. Additionally, we used the ten-fold cross validation to make sure that the data is not overfit.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;features&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Features&lt;/h5&gt;
&lt;p&gt;Allele frequency was originally a feature, however, ClinVar did not contain allele frequency and any attempts at obtaining allele frequency using the Ensembl allele frequency calculator were not successful because it only retrieves information for variants identified from the 1000 Genomes Project. While the cBioPortal dataset did have allele frequency, this was the frequency of a cancerous cell with the PAX9 variant out of all the biopsy samples which was not directly comparable to the gnomAD allele frequency value which is in reference to the entire population. Therefore, this feature was removed.&lt;/p&gt;
&lt;div id=&#34;gene-location&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Gene Location&lt;/h6&gt;
&lt;p&gt;The feature ‘gene location’ was derived from all the variant positions (only using the starting position for convenience) on the chromosome in reference to the human genome GRCh37. The classification of position was built up according to the UCSC genome browser with reference sequence NM_006194. Additionally, we enriched the classification result via the usage of the NCBI analysis on NM_006194.3 since USCS genome browser only provided the exon position. As a result, categories in this feature include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;5’ UTR (37126773-37,131,294) (covering all the exon 1 and majority of exon 2)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start codon region (37131295-37131298) (at the very end of exon 2)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exon 3 (37132102-37132728) (contain PAI, RED and KDM5B)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PAI (37132116-37132286)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RED (37132341-37132487)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;KDM5B (37132599-37132664)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exon 4 (37135667-37135806)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exon 5 (37145403-37145657)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3’ UTR (37,145,658-37147011)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intron (parts outside of the above regions)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;paired-box-region&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Paired box region&lt;/h6&gt;
&lt;p&gt;The PAI stands for paired-box region, which encodes a structure for the PAX9 transcription factor to bind to DNA molecules. The RED subdomain aids and corrects PAI’s recognition of DNA sites, and its variant number is larger than PAI, which might account for why PAX proteins have different target genes. The KDM5B protein helps transcriptional repression of some tumor suppressor gene.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;blosum80-amino-acid-conservation&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;BLOSUM80 (amino acid conservation)&lt;/h6&gt;
&lt;p&gt;The BLOSUM80 score displayed the extent of effect of amino acid change on the stability of the PAX9 protein. We expected that this feature would greatly improve the prediction of our model. R package ‘peptider’ was used to obtain the BLOSUM80 matrix. However, the substitution matrix only considered single amino acid change, so we assumed that variants with a replacement length over one (such as a deletion, frameshift, etc) would get the lowest score since they are more likely to have deleterious effects on the protein structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mutation-type&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Mutation Type&lt;/h6&gt;
&lt;p&gt;For the feature of mutation type, it was determined from the original data for gnomAD and cBioPortal. The ClinVar data was processed via VEP to acquire the result. Using the mutation feature and BLOSUM80 matrix, we were able to further classify the data into whether it was in-frameshift and out-of-frame shift since it was expected that frameshift mutation would likely to generate abnormal protein.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cadd-phred-score&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;CADD PHRED score&lt;/h6&gt;
&lt;p&gt;CADD PHRED score was obtained by using the coordinates of variants and submitting to VEP. The result produced a VCF file that was submitted to CADD. Some variants such as fusion proteins did not have a CADD score and were given an estimated CADD score ( in this particular case, maximum CADD score was used in replacement) which may not have reflected its true deleteriousness effect.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pathogenicity&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Pathogenicity&lt;/h6&gt;
&lt;p&gt;Finally, for the pathogenicity feature–which was our goal of RF prediction–due to the missing allele frequency in most of the cBioPortal and ClinVar it would be nearly impossible to precisely know which variant was neutral or not. Thus, we had to assume that all ClinVar and cBioPortal variants were pathogenic while all gnomAD variants were neutral (after filtering for duplicates) for convenience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;random-forest&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Random Forest&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
##  randomForest(formula = phenotype ~ ., data = training_data, importance = T,      ntree = 20, na.action = na.exclude) 
##                Type of random forest: classification
##                      Number of trees: 20
## No. of variables tried at each split: 2
## 
##         OOB estimate of  error rate: 14.44%
## Confusion matrix:
##            neutral pathogenic class.error
## neutral         75         15   0.1666667
## pathogenic      11         79   0.1222222&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The RF model showed that it had an overall accuracy of 85.56%, with 20 decision trees for doing classification tasks. The low value of tree number was due to the limited training data size (80).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##                 neutral pathogenic MeanDecreaseAccuracy MeanDecreaseGini
## GRCh37Location 6.496823   9.856697             9.376161       25.2817657
## gene_location  1.924800   3.587758             4.798873        8.1996621
## BLOSUM         4.423561   7.614464             6.227631       17.4672859
## Mutation_Type  2.271270   2.648797             2.938764       13.3248609
## inframe        1.025978   0.000000             1.025978        0.4994845
## PHRED          3.754689   1.829102             3.861181       19.7613239&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/project/PAX9_RF_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;
Based on the variable importance plot above, the most important variable would be the location relative to the reference GRCh37. On the other hand, the variable with the smallest effect on the predicting power of our model is inframe. This is expected since there were relatively few variants that caused a frame shift in the population.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ten-fold-cross-validation&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Ten-fold Cross Validation&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;##                           1         2         3         4         5         6
## ten_fold_accuracy 0.8888889 0.7777778 0.8888889 0.8888889 0.7777778 0.8888889
##                           7         8         9        10
## ten_fold_accuracy 0.8333333 0.9444444 0.8888889 0.8888889&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cross Validation mean accuracy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.8666667&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By comparing the accuracy between RF (85.56%) and ten-fold (86.67%), we found that despite the low sample size, the model exhibited limited overfitting.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;prediction-result&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Prediction Result&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;##             prediction_result
## truth        neutral pathogenic Sum
##   pathogenic       5         17  22
##   neutral         20          2  22
##   Sum             25         19  44&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             accuracy sensitivity specificity precision
## pathogenic 0.8409091   0.8947368   0.9090909 0.8947368&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the confusion matrix, the model has relatively good accuracy, sensitivity, specificity, and precision.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The objective of the project was to build a random forest model to predict the phenotype of a PAX9 gene variant. The ten-fold cross validation indicated that the model didn’t overfit. While the prediction result was satisfactory, it is important to note that it is only as good as the available training data. It is again acknowledged that there was a risk associated with using the ClinVar resource due to its relatively loose quality check. Additionally, since a large proportion of the allele frequency in cBioPortal and ClinVar was missing, it was difficult to identify all the potential neutral variants and all the variants were assumed to be pathogenic in order to run the RF model. Hence, if possible, allele frequency could potentially be an important feature of any future research on PAX9 gene. Another improvement would be to increase the very limited online human PAX9 gene data to generate more powerful machine learning models. To further refine the prediction of the RF model, a suggestion may be to use the continuous conservation score from other available tools as highly conserved sequences are likely less tolerant to changes. Although BLOSUM80 was insightful on the effect of amino acid substitution on protein structure, adding conservation score could provide a more comprehensive information. Lastly, future research may have a stronger focus on the PAX9’s metabolic pathway. This gene plays a principal role in organogenesis and interacts with many other genes so it is unfortunate that this gene hasn’t received the same attention as other popular genes like p53.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Bonczek et al, ‘PAX9 gene mutations and tooth agenesis: A review’, Clinical Genetics, 2017/02/01, doi: 10.1111/cge.12986.
&lt;a href=&#34;https://www.researchgate.net/publication/313264549_PAX9_gene_mutations_and_tooth_agenesis_A_review&#34; class=&#34;uri&#34;&gt;https://www.researchgate.net/publication/313264549_PAX9_gene_mutations_and_tooth_agenesis_A_review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;UCSC genome browser on PAX9. &lt;a href=&#34;http://www.genome.ucsc.edu/cgi-bin/hgc?hgsid=828585015_qsdofxT4g0z4a48R33zLnyqdtxND&amp;amp;g=htcCdnaAliInWindow&amp;amp;i=NM_006194&amp;amp;c=chr14&amp;amp;l=37126772&amp;amp;r=37147011&amp;amp;o=37126772&amp;amp;aliTable=refSeqAli&amp;amp;table=refGene&#34; class=&#34;uri&#34;&gt;http://www.genome.ucsc.edu/cgi-bin/hgc?hgsid=828585015_qsdofxT4g0z4a48R33zLnyqdtxND&amp;amp;g=htcCdnaAliInWindow&amp;amp;i=NM_006194&amp;amp;c=chr14&amp;amp;l=37126772&amp;amp;r=37147011&amp;amp;o=37126772&amp;amp;aliTable=refSeqAli&amp;amp;table=refGene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NCBI data on PAX9: &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/nuccore/NM_006194#feature_NM_006194.3&#34; class=&#34;uri&#34;&gt;https://www.ncbi.nlm.nih.gov/nuccore/NM_006194#feature_NM_006194.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pellizzari et al. Co-operation between the PAI and RED subdomains of Pax-8 in the interaction with the thyroglobulin promoter. Biochem J. 1999;337 ( Pt 2)(Pt 2):253‐262.
&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1219959/&#34; class=&#34;uri&#34;&gt;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1219959/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;KDB5B gene: &lt;a href=&#34;https://www.genecards.org/cgi-bin/carddisp.pl?gene=KDM5B&#34; class=&#34;uri&#34;&gt;https://www.genecards.org/cgi-bin/carddisp.pl?gene=KDM5B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ensembl Variant Effect Predictor (VEP): &lt;a href=&#34;https://useast.ensembl.org/info/docs/tools/vep/index.html&#34; class=&#34;uri&#34;&gt;https://useast.ensembl.org/info/docs/tools/vep/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Combined Annotation Dependent Depletion (CADD): &lt;a href=&#34;https://cadd.gs.washington.edu/&#34; class=&#34;uri&#34;&gt;https://cadd.gs.washington.edu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cBioPortal: &lt;a href=&#34;https://www.cbioportal.org/&#34; class=&#34;uri&#34;&gt;https://www.cbioportal.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ClinVar:&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/clinvar/&#34; class=&#34;uri&#34;&gt;https://www.ncbi.nlm.nih.gov/clinvar/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gnomAD: &lt;a href=&#34;https://gnomad.broadinstitute.org/&#34; class=&#34;uri&#34;&gt;https://gnomad.broadinstitute.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Random Forest: A. Liaw and M. Wiener (2002). Classification and Regression by randomForest. R News 2(3), 18–22.&lt;/li&gt;
&lt;li&gt;Tidyr package: Hadley Wickham and Lionel Henry (2020). tidyr: Tidy Messy Data. R package; version 1.0.2. &lt;a href=&#34;https://CRAN.R-project.org/package=tidyr&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=tidyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Peptider package: Heike Hofmann, Eric Hare and GGobi Foundation (2015). peptider: Evaluation of Diversity in Nucleotide Libraries. R package version 0.2.2. &lt;a href=&#34;https://CRAN.R-project.org/package=peptider&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=peptider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dplyr package: Hadley Wickham, Romain François, Lionel Henry and Kirill Müller (2020). Dplyr: A Grammar of Data Manipulation. R package version 0.8.5. &lt;a href=&#34;https://CRAN.R-project.org/package=dplyr&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=dplyr&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bioinformatics Glossary</title>
      <link>/post/bioinformatics_glossary/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/bioinformatics_glossary/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-programming-cheatsheet&#34;&gt;Basic Programming CheatSheet&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#unixlinux-bash&#34;&gt;Unix/Linux (Bash)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#need-to-kill-a-process&#34;&gt;Need to kill a process?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bash-script&#34;&gt;Bash Script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r-vs-python&#34;&gt;R vs Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#working-with-data-in-files-or-websites&#34;&gt;Working with data in files or websites&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#reading-files&#34;&gt;Reading files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reading-websites-with-python&#34;&gt;Reading websites with Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#genetic-data&#34;&gt;Genetic Data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#reference-sequence-number&#34;&gt;Reference Sequence Number&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#grch-37&#34;&gt;GRCh 37&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ncbi-reference-sequence-refseq&#34;&gt;NCBI Reference Sequence (RefSeq)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ensemble&#34;&gt;Ensemble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#snps&#34;&gt;SNPs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#types-of-files&#34;&gt;Types of Files&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fasta&#34;&gt;FASTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fastq&#34;&gt;Fastq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sambam-files&#34;&gt;SAM/BAM files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sdf-structure-data-file&#34;&gt;SDF (structure data file)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vcf&#34;&gt;VCF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bioinformatic-resourcestools&#34;&gt;Bioinformatic Resources/Tools&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#blast&#34;&gt;BLAST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#brenda&#34;&gt;BRENDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#expasy&#34;&gt;ExPASy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pdb&#34;&gt;PDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rosalind&#34;&gt;Rosalind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#micellaneous&#34;&gt;Micellaneous&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#blosum-block-storing-matrix-and-pam&#34;&gt;BLOSUM (Block Storing Matrix) and PAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#e.c.-number&#34;&gt;E.C. Number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hamming-distance&#34;&gt;Hamming Distance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#k-mers&#34;&gt;K-mers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#needleman-wunsch-algorithm&#34;&gt;Needleman-Wunsch algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orf&#34;&gt;ORF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#smith-waterman-algorithm&#34;&gt;Smith-Waterman algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;*** As I learn more, I will hopefully continue to add to this page for things that confused me or I thought would be helpful to compile together. As a warning, this is just a collection of notes and is not super organized.&lt;/p&gt;
&lt;div id=&#34;basic-programming-cheatsheet&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Basic Programming CheatSheet&lt;/h1&gt;
&lt;div id=&#34;unixlinux-bash&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unix/Linux (Bash)&lt;/h2&gt;
&lt;p&gt;Another way of navigating through files and giving commands to the operating system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Absolute&lt;/strong&gt; path (begins with “/”)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/home/Downloads/pax9.csv&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Relative&lt;/strong&gt; path (does NOT begin with “/”)&lt;/p&gt;
&lt;p&gt;If you are in /home&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Downloads&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Downloads/pax9.csv&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are in /home/Downloads&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pax9.csv&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;31%&#34; /&gt;
&lt;col width=&#34;68%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;pwd&lt;/td&gt;
&lt;td&gt;“print working directory” (absolute)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;root directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ls&lt;/td&gt;
&lt;td&gt;“listing”, gives contents of current directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;ls&lt;/strong&gt; /home/Downloads&lt;/td&gt;
&lt;td&gt;contents of download directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;cd&lt;/td&gt;
&lt;td&gt;“change directory”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;..&lt;/td&gt;
&lt;td&gt;directory above current&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;current directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;home directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;“quit”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Control + C&lt;/td&gt;
&lt;td&gt;“cancel”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;allows you to view the current processes running&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;cp&lt;/strong&gt; test.csv test2.csv&lt;/td&gt;
&lt;td&gt;“copy”: test.csv is duplicated and named test2.csv (last arg = destination)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;cp&lt;/strong&gt; test.csv other.csv Downloads&lt;/td&gt;
&lt;td&gt;“copy”: test.csv and other.csv is copied to the Downloads directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;mv&lt;/strong&gt; test.csv other.csv Downloads&lt;/td&gt;
&lt;td&gt;“moves”: test.csv and other.csv is moved to the downloads directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;mv&lt;/strong&gt; test.csv new.csv&lt;/td&gt;
&lt;td&gt;“renames”: test.csv is renamed to new.csv (also works for directory)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;rm&lt;/strong&gt; test.csv other.csv&lt;/td&gt;
&lt;td&gt;“removes”: deletes other.csv and test.csv (does not work for directory)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;rmdir&lt;/strong&gt; Downloads&lt;/td&gt;
&lt;td&gt;“removes”: directory (must be empty!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;mkdir&lt;/strong&gt; Homework&lt;/td&gt;
&lt;td&gt;“makes directory” called homework&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;man&lt;/strong&gt; ls&lt;/td&gt;
&lt;td&gt;“manual” of command ls&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;chmod&lt;/strong&gt; u+x test.sh&lt;/td&gt;
&lt;td&gt;“change file mode”: permissions, read ( r ), write ( w ) or execute ( x )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Control + D &lt;strong&gt;OR&lt;/strong&gt; logout&lt;/td&gt;
&lt;td&gt;to log out of a system&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Useful Tricks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hit up and down arrow keys to get previous commands&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use tab key for autocompletion&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spaces for file names can cause problems because they are seen as separate items. To prevent this, put them in quotes or use “\” before the space&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if a file/destination does not exist, it will create one. If it does exist, it may overwrite&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;there is no &lt;strong&gt;undo&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;need-to-kill-a-process&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Need to kill a process?&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Get PID (process ID) from top&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type: kill PID&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;doesn’t work? type: kill -9 PID&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;bash-script&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bash Script&lt;/h3&gt;
&lt;p&gt;A text file with commands. Anything you put in command line can be in a script and vice versa. Uses the &lt;strong&gt;.sh&lt;/strong&gt; extension.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;#!/bin/bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First line must always look something like this. “#!” is called a &lt;strong&gt;shebang&lt;/strong&gt; and immediately after (no spaces), put the path to the interpreter. If you don’t know, type: “which bash” in command line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;#running program from its path&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;#Bob 07/01/2020&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Comments to describe what it does, author, date, etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;name = “Bob”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can set variables&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;echo Hello $name !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like print, it will print stuff after it. Refer to variables with a “$” in front.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pwd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can put commands in the script.&lt;/p&gt;
&lt;p&gt;In the actual command line, to &lt;strong&gt;run&lt;/strong&gt; the script:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./testscript.sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AKA, look in the current directory to find the script named testscript.sh and run it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r-vs-python&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R vs Python&lt;/h2&gt;
&lt;p&gt;While R has a lot of super useful packages, especially for bioinformatics and statistics, I found it &lt;strong&gt;super&lt;/strong&gt; annoying to code in base R compared to python. Here are some essential equivalents for R:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;30%&#34; /&gt;
&lt;col width=&#34;69%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;len(myList)&lt;/td&gt;
&lt;td&gt;length(myList) **won’t work for strings (see below example)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;x in myList&lt;/td&gt;
&lt;td&gt;x %in% myList&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;myList.index(item)&lt;/td&gt;
&lt;td&gt;match (item, myList)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;“string”[:3]&lt;/td&gt;
&lt;td&gt;substr (“string”, 1, 3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;range(0, 6,2)&lt;/td&gt;
&lt;td&gt;seq(from = 0, 4, by=2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;“str”+“ing”&lt;/td&gt;
&lt;td&gt;paste0(“str”,“ing”, &amp;quot;&amp;quot;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;myList=[1,2]&lt;/td&gt;
&lt;td&gt;myList=c(1,2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;myList.append(3)&lt;/td&gt;
&lt;td&gt;myList=c(myList, 3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;myList.extend(myList2)&lt;/td&gt;
&lt;td&gt;myList=c(myList,myList2) &lt;strong&gt;OR&lt;/strong&gt; myList=append(myList, myList2)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;python&lt;/strong&gt;: len(“string”) vs &lt;strong&gt;R&lt;/strong&gt;: nchar(“string”)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;for i in range(len(&amp;quot;test&amp;quot;)): 
  print (i)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0
## 1
## 2
## 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (i in 1:nchar(&amp;quot;test&amp;quot;)){
  print (i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
## [1] 2
## [1] 3
## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Matrices&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;python&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test_matrix=[]
for i in range(3): 
  test_matrix.append([0]*3)
test_matrix[0][1]=2
print(test_matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[0, 2, 0], [0, 0, 0], [0, 0, 0]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_matrix&amp;lt;- matrix(0, nrow = 3, ncol = 3)
test_matrix[1,2]=2
print(test_matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    0    2    0
## [2,]    0    0    0
## [3,]    0    0    0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;working-with-data-in-files-or-websites&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Working with data in files or websites&lt;/h2&gt;
&lt;div id=&#34;reading-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reading files&lt;/h3&gt;
&lt;p&gt;Before anthing, make sure you’re in the right directory !
In python, it looks something like this:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import os
os.getcwd()
os.chdir(&amp;quot;/Users/Cara/Desktop/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using open, various functions can be accomplished including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;r –&amp;gt; read&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;w –&amp;gt; write&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a –&amp;gt; append&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#open the file for reading 
infile=open(&amp;quot;file_name.txt&amp;quot;, &amp;quot;r&amp;quot;)

#reads one character
char = infile.read(1)

#reads one line until \n
line = infile.readline()
while line!=&amp;quot;&amp;quot;: 
  # ... 
  line = infile.readline()

#alternatively, use infile.readlines() to get all lines in a list, with \n at the end of each item 
#OR use infile.read() to get all lines from where you are in the file 

#close the file after you&amp;#39;re finished! 
infile.close()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In R, some quick equivalents include:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;infile=file(&amp;quot;file_name.txt&amp;quot;,open=&amp;quot;r&amp;quot;)
line &amp;lt;-readLines(infile)
close(infile)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-websites-with-python&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reading websites with Python&lt;/h3&gt;
&lt;p&gt;You need to import the urllib request package!&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from urllib import request

url=&amp;quot;http://www.uniprot.org/uniprot/A2Z669.fasta&amp;quot;

#request- opens urls
resp = request.urlopen(url) 

#urlopen is used to open url like open is used for files
#returns html as a string - stored in data variable 
data =  resp.read() 

#don&amp;#39;t forget to close your request! 
resp.close()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;genetic-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Genetic Data&lt;/h1&gt;
&lt;div id=&#34;reference-sequence-number&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reference Sequence Number&lt;/h2&gt;
&lt;p&gt;When I first started working on genetic data and especially with my &lt;a href=&#34;../../project/PAX9_RF&#34;&gt;PAX9 project&lt;/a&gt;, I was so confused by all of the different values that were associated with the gene:&lt;/p&gt;
&lt;p&gt;Genomic reference: NG_013357.1 (GRCh 37)&lt;/p&gt;
&lt;p&gt;Transcript reference: NM_006194.3&lt;/p&gt;
&lt;p&gt;Ensembl gene ID: ENSG00000198807.8&lt;/p&gt;
&lt;p&gt;Canonical transcript: ENST00000361487.6&lt;/p&gt;
&lt;div id=&#34;grch-37&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;GRCh 37&lt;/h3&gt;
&lt;p&gt;Before going into what all of these sequences are, first of all, what is GRCh37? I kept coming across this when I first trying to find data on my gene. &lt;strong&gt;GRCh37&lt;/strong&gt; stands for Genome Reference Consortium Human Build 37 and is generally synonymous with &lt;strong&gt;hg19&lt;/strong&gt;. Similarly, &lt;strong&gt;hg38&lt;/strong&gt; can also be used to refer to the same genome build as &lt;strong&gt;GRCh38&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What is the difference between GRCh37 and GRCh38? GRCh38 was released after GRCh37 and has more updated annotations. Luckily, various tools such as from [NCBI]](&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/genome/tools/remap&#34; class=&#34;uri&#34;&gt;https://www.ncbi.nlm.nih.gov/genome/tools/remap&lt;/a&gt;) or &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/genome/tools/remap&#34;&gt;Ensembl&lt;/a&gt; can be used for converting annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ncbi-reference-sequence-refseq&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;NCBI Reference Sequence (RefSeq)&lt;/h3&gt;
&lt;p&gt;The accession number format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NG_: &lt;strong&gt;g&lt;/strong&gt;ene/&lt;strong&gt;g&lt;/strong&gt;enomic region&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NC_: plus (+) strand on &lt;strong&gt;c&lt;/strong&gt;hromosome&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NT_: constructed genomic contigs (overlapping DNA fragments that are used to assemble the full sequence)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;‘NC’, ‘NG’, ‘NT’ all refer to genomic sequences&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NM_: &lt;strong&gt;m&lt;/strong&gt;RNA, coding strand&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NR_: non-coding &lt;strong&gt;R&lt;/strong&gt;NA&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NP_: &lt;strong&gt;p&lt;/strong&gt;rotein&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Also, if it begins with an ‘X’ liks ‘XP’ or ‘XM’, it probably means that the sequence is from computational prediction.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What about CDS? That is the coding region of a gene that is translated to protein. Therefore, it excludes the UTR and introns.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ensemble&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ensemble&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ENST: transcipt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ENSG: gene &lt;em&gt;(One gene can have many corresponding transcripts.)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ENSP: protein&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;snps&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;SNPs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dbSNP: Single Nucleotide Polymorphism Database from NCBI, used for SNPs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rs: &lt;strong&gt;R&lt;/strong&gt;ef&lt;strong&gt;S&lt;/strong&gt;NP, also used to refer to a specific SNP&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;types-of-files&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Types of Files&lt;/h1&gt;
&lt;div id=&#34;fasta&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;FASTA&lt;/h2&gt;
&lt;p&gt;FASTA is a type of text-based file that is used to store a nucleotide or amino acid sequence. In R, there is the read.fasta() function from the ‘seqinr’ package. It’s written in the following format:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt;3LWB:A|PDBID|CHAIN|SEQUENCE
MSANDRRDRRVRVAVVFGGRSNEHAISCVSAGSILRNLDSRRFDVIAVGITPAGSWVLTDANPDALTITNRELPQVKSGS
GTELALPADPRRGGQLVSLPPGAGEVLESVDVVFPVLHGPYGEDGTIQGLLELAGVPYVGAGVLASAVGMDKEFTKKLLA
ADGLPVGAYAVLRPPRSTLHRQECERLGLPVFVKPARGGSSIGVSRVSSWDQLPAAVARARRHDPKVIVEAAISGRELEC
GVLEMPDGTLEASTLGEIRVAGVRGREDSFYDFATKYLDDAAELDVPAKVDDQVAEAIRQLAIRAFAAIDCRGLARVDFF
LTDDGPVINEINTMPGFTTISMYPRMWAASGVDYPTLLATMIETTLARGVGLH
&amp;gt;3LWB:B|PDBID|CHAIN|SEQUENCE
MSANDRRDRRVRVAVVFGGRSNEHAISCVSAGSILRNLDSRRFDVIAVGITPAGSWVLTDANPDALTITNRELPQVKSGS
GTELALPADPRRGGQLVSLPPGAGEVLESVDVVFPVLHGPYGEDGTIQGLLELAGVPYVGAGVLASAVGMDKEFTKKLLA
ADGLPVGAYAVLRPPRSTLHRQECERLGLPVFVKPARGGSSIGVSRVSSWDQLPAAVARARRHDPKVIVEAAISGRELEC
GVLEMPDGTLEASTLGEIRVAGVRGREDSFYDFATKYLDDAAELDVPAKVDDQVAEAIRQLAIRAFAAIDCRGLARVDFF
LTDDGPVINEINTMPGFTTISMYPRMWAASGVDYPTLLATMIETTLARGVGLH&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first line is used to describe the folowing sequence and it is indicated by the “&amp;gt;” sign. As you can see above, multiple sequences can be found in one FASTA file.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fastq&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fastq&lt;/h2&gt;
&lt;p&gt;Similar to FASTA, except from DNA sequencing (commonly for illumina). It also includes the PHRED score which is a measure of the quality of the reading for each base. It is denoted by a single ASCII character.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@ SequenceID&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;CATGGGCAGCCGAGAGATTGCGA&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;+&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;K&amp;lt;=gux;YZ[bcs3^_`a;&amp;lt;|}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first line contains the description like fasta but is indicated by the “@” sign instead. After which, the nucleotide sequence is shown on the 2nd line. The third line starts with a “+” sign. Finally, the 4th line contains the quality scores.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sambam-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;SAM/BAM files&lt;/h2&gt;
&lt;p&gt;SAM and BAM files contain the same information, the difference is that BAM files are &lt;strong&gt;binary&lt;/strong&gt; versions of a SAM file. SAM stands for “Sequence Alignment/Map” and contain information about sequences aligned to a reference sequence, and is generated by next generation sequencing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sdf-structure-data-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;SDF (structure data file)&lt;/h2&gt;
&lt;p&gt;** MOL files follow the same format but are only for a single molecule while SDF files can contain multiple
&lt;img src=&#34;SDF_file.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Three line &lt;strong&gt;header&lt;/strong&gt;:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Name of Molecule (71080)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Software to generate the file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Comment (blank above)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*** Even if lines are left blank. Still need the &lt;em&gt;lines&lt;/em&gt; there for file to function properly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Counts&lt;/strong&gt; line&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Number of atoms: 13&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Number of bonds: 12&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Atoms&lt;/strong&gt; (one line for each atom)&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;X coordinate: 1.450&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Y coordinate: -1.0463&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Z coordinate: -0.2600&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Atom symbol: O (oxygen)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Bonds&lt;/strong&gt; (one line for bond)&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Index of atom 1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Index of atom 2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type of bond (1=single, 2=double, 3=triple)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;M END&lt;/strong&gt; : Required at end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Metadata&lt;/strong&gt; (data that provides info on other data)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Starts with header that begins with &amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Name of data field is written in &amp;lt;&amp;gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E.g. &amp;gt; &amp;lt;PUBCHEM_COMPOUND_CID&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Multiple molecules are separated with four dollar signs: &lt;strong&gt;$$$$&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;vcf&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;VCF&lt;/h2&gt;
&lt;p&gt;VCF stands for variant call format and stores different variants of a gene.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;bioinformatic-resourcestools&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Bioinformatic Resources/Tools&lt;/h1&gt;
&lt;div id=&#34;blast&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;BLAST&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blast.ncbi.nlm.nih.gov/Blast.cgi&#34;&gt;BLAST&lt;/a&gt; stands for &lt;strong&gt;B&lt;/strong&gt;asic &lt;strong&gt;L&lt;/strong&gt;ocal &lt;strong&gt;A&lt;/strong&gt;lignment &lt;strong&gt;S&lt;/strong&gt;earch &lt;strong&gt;T&lt;/strong&gt;ool. It finds areas of similarity between sequences of nucleotides or amino acids using a scoring matrix. There are many types of blast including blastn, blastp, blastx, tblastn, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Query cover: how much of the query sequence actually overlapps with the aligned sequence.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E value (expected value): smaller is better (significant). It basically means how many hits would you get just randomly (based on the quality of score and the length of the query)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Percent Identity: percentage of characters matching in the query and aligned sequence&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;brenda&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;BRENDA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.brenda-enzymes.org/index.php&#34;&gt;BRENDA&lt;/a&gt; contains enzyme information such as the reaction diagram, links to research papers, KM values, IC50, inhibitors for the enzyme, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;expasy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ExPASy&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://web.expasy.org/protparam/&#34;&gt;ExPASy&lt;/a&gt; or Expert Protein Anaylsis System can be used to find the molecular weight of a sequence of amino acids, theoretical pI, instability, extinction coefficient (for spectrophotometry), etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pdb&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;PDB&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rcsb.org/&#34;&gt;PDB&lt;/a&gt; or Protein Data Bank contains 3D files of mostly proteins. For each protein, it tells you the associated research paper, number of chains, any ligands present already in the structure, resolution, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rosalind&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rosalind&lt;/h2&gt;
&lt;p&gt;Different from the other resources on this list, this is a great tool for practicing bioinformatics coding. Here’s a link to my &lt;a href=&#34;http://rosalind.info/users/cara.yijin.zou@gmail.com/&#34;&gt;profile&lt;/a&gt; to see my progress so far.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;micellaneous&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Micellaneous&lt;/h1&gt;
&lt;div id=&#34;blosum-block-storing-matrix-and-pam&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;BLOSUM (Block Storing Matrix) and PAM&lt;/h2&gt;
&lt;p&gt;Both used as a measure of similarity between proteins. PAM is for closely related while BLOSUM is for distantly related. For BLOSUM, BLOSUM45 would be used for proteins more distant from each other than BLOSUM90.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;e.c.-number&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;E.C. Number&lt;/h2&gt;
&lt;p&gt;You can categorize enzymes based on their EC number (Enzyme Committee number) based on the reaction they catalyze. For example, D-alanine D-alanine ligase has an E.C. number of 6.3.2.4. The “6” indicates that it is a ligase (joining two molecules using ATP).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hamming-distance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hamming Distance&lt;/h2&gt;
&lt;p&gt;What is the minimum number of nucleotides that need to be changed for one string to transform into another (if they are the same length). In biology, one application is in identification: in illumina sequencing, you can sequence multiple samples together and they can be differentiated due to adaptor sequences which have barcode/index sequences that are unique to each sample.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;10%&#34; /&gt;
&lt;col width=&#34;14%&#34; /&gt;
&lt;col width=&#34;24%&#34; /&gt;
&lt;col width=&#34;25%&#34; /&gt;
&lt;col width=&#34;25%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Sequence 1&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Sequence 2&lt;/strong&gt; (Hamming dist=1)&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Sequence 3&lt;/strong&gt; (Hamming dist=2)&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Sequence 3&lt;/strong&gt; (Hamming dist=2)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Original&lt;/td&gt;
&lt;td&gt;ACCG&lt;/td&gt;
&lt;td&gt;AC&lt;strong&gt;T&lt;/strong&gt;G&lt;/td&gt;
&lt;td&gt;AC&lt;strong&gt;T&lt;/strong&gt;T&lt;/td&gt;
&lt;td&gt;GC&lt;strong&gt;T&lt;/strong&gt;T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;1 Mutation&lt;/td&gt;
&lt;td&gt;“did not change”&lt;/td&gt;
&lt;td&gt;ACCG&lt;/td&gt;
&lt;td&gt;ACC&lt;strong&gt;T&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;GCC&lt;strong&gt;T&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;2 Mutations&lt;/td&gt;
&lt;td&gt;“did not change”&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;ACCG&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;G&lt;/strong&gt;CCT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;3 Mutations&lt;/td&gt;
&lt;td&gt;“did not change”&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;ACCG&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;However, if one mutation occurs per sequence, than you need at least a hamming distance of &lt;strong&gt;2(error)+1&lt;/strong&gt;. For example: if you’re starting sequences are “ACCG” and “GCTT”, what if you get the sequence “ACCT”? Is that the sequence “ACC&lt;strong&gt;G&lt;/strong&gt;”–&amp;gt; “ACCT”? Or “&lt;strong&gt;G&lt;/strong&gt;CCT”–&amp;gt; “ACCT”? Therefore, if you have one error per sequence, you need a hamming distance of atleast &lt;strong&gt;3&lt;/strong&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;k-mers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;K-mers&lt;/h2&gt;
&lt;p&gt;Subsequences of length k of a nucleotide sequence.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def findkmers(k, seq):
    dict1={}
    a = 0 
    b= k
    k_mer= seq[a:b]
    while len(k_mer)==k: 
        if k_mer in dict1: 
            dict1[k_mer]+= 1
        else: 
            dict1[k_mer]= 1
        a+=1
        b+=1
        k_mer= seq[a:b]
    print (dict1)

def main():
   my_seq1 = &amp;quot;CAGCCCAATC&amp;quot;
   print(&amp;quot;For the sequence: &amp;quot;, my_seq1)
   for i in range (1,5):
      print(&amp;quot;The&amp;quot;, str(i)+&amp;quot;-mers are :&amp;quot;)
      findkmers(i, my_seq1)

main()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## For the sequence:  CAGCCCAATC
## The 1-mers are :
## {&amp;#39;C&amp;#39;: 5, &amp;#39;A&amp;#39;: 3, &amp;#39;G&amp;#39;: 1, &amp;#39;T&amp;#39;: 1}
## The 2-mers are :
## {&amp;#39;CA&amp;#39;: 2, &amp;#39;AG&amp;#39;: 1, &amp;#39;GC&amp;#39;: 1, &amp;#39;CC&amp;#39;: 2, &amp;#39;AA&amp;#39;: 1, &amp;#39;AT&amp;#39;: 1, &amp;#39;TC&amp;#39;: 1}
## The 3-mers are :
## {&amp;#39;CAG&amp;#39;: 1, &amp;#39;AGC&amp;#39;: 1, &amp;#39;GCC&amp;#39;: 1, &amp;#39;CCC&amp;#39;: 1, &amp;#39;CCA&amp;#39;: 1, &amp;#39;CAA&amp;#39;: 1, &amp;#39;AAT&amp;#39;: 1, &amp;#39;ATC&amp;#39;: 1}
## The 4-mers are :
## {&amp;#39;CAGC&amp;#39;: 1, &amp;#39;AGCC&amp;#39;: 1, &amp;#39;GCCC&amp;#39;: 1, &amp;#39;CCCA&amp;#39;: 1, &amp;#39;CCAA&amp;#39;: 1, &amp;#39;CAAT&amp;#39;: 1, &amp;#39;AATC&amp;#39;: 1}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;needleman-wunsch-algorithm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Needleman-Wunsch algorithm&lt;/h2&gt;
&lt;p&gt;Global alignment&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;orf&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ORF&lt;/h2&gt;
&lt;p&gt;ORF stands for open reading frame. When reading in a DNA strand, it’s important to note that &lt;strong&gt;either&lt;/strong&gt; strand can be the coding strand! Therefore, there are &lt;strong&gt;6&lt;/strong&gt; reading frames per DNA strand (&lt;em&gt;not 3 like I previously would have immediately thought&lt;/em&gt;). You do however need to reverse complement the given DNA strand.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;smith-waterman-algorithm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Smith-Waterman algorithm&lt;/h2&gt;
&lt;p&gt;Local alignment&lt;/p&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://useast.ensembl.org/info/website/tutorials/grch37.html&#34; class=&#34;uri&#34;&gt;http://useast.ensembl.org/info/website/tutorials/grch37.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://bitesizebio.com/38335/get-to-know-your-reference-genome-grch37-vs-grch38/&#34; class=&#34;uri&#34;&gt;https://bitesizebio.com/38335/get-to-know-your-reference-genome-grch37-vs-grch38/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/books/NBK50679/#RefSeqFAQ.what_is_a_reference_sequence_r&#34; class=&#34;uri&#34;&gt;https://www.ncbi.nlm.nih.gov/books/NBK50679/#RefSeqFAQ.what_is_a_reference_sequence_r&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://thesequencingcenter.com/knowledge-base/fastq-files/&#34; class=&#34;uri&#34;&gt;https://thesequencingcenter.com/knowledge-base/fastq-files/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kerfeld and Scott, PLoS Biology 2011&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ryanstutorials.net/linuxtutorial/&#34; class=&#34;uri&#34;&gt;https://ryanstutorials.net/linuxtutorial/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ryanstutorials.net/bash-scripting-tutorial/bash-script.php&#34; class=&#34;uri&#34;&gt;https://ryanstutorials.net/bash-scripting-tutorial/bash-script.php&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://learn.datacamp.com/&#34; class=&#34;uri&#34;&gt;https://learn.datacamp.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.nonlinear.com/progenesis/sdf-studio/v0.9/faq/sdf-file-format-guidance.aspx&#34; class=&#34;uri&#34;&gt;http://www.nonlinear.com/progenesis/sdf-studio/v0.9/faq/sdf-file-format-guidance.aspx&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
