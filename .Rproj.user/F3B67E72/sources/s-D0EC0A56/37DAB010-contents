# final project coding
## 1st step: extract data w/ target features and exclude gnomAD data w/ same rsID in other two (pathogenic)- three resulting data: clinvar11, cancer1, gnomAD1

#Clinvar; Resulting data name: clinvar11 and clinvar_vsd1
#1. exclude data from row 58 to 64 since they don't have NM_accession and data
#2. Need  'dbSNP ID', 'GRCh37Location', 'Clinical significance (Last reviewed)', 'Condition(s)' , 'Name', 'protein change')
#3. By examining the clinical significance feature, we are able to exclude those are (likely) benign and keep everything else, including uncertain significance since we assume they are also pathogenic)- keep row # (3, 6, 33, 35, 39, 40, 44, 46, 50, 53, 54, 55)
#4.  About 5 of the 'GRCh37Location' is written like this '37132156 - 37132158' since they are duplication or frameshift mutation. For convenience, we manually keep the starting position only.
library(tidyr)
library(dplyr)
clinvar = read.csv('clinvar_result.csv', header = TRUE)
clinvar = clinvar[1:57,] %>% select(dbSNP.ID, GRCh37Location, Name, Protein.change, Clinical.significance..Last.reviewed.) %>% mutate(GRCh37Location = as.integer(GRCh37Location)) %>%
  mutate(dbSNP.ID = as.character(dbSNP.ID)) %>% mutate(Name = as.character(Name)) %>% mutate(Protein.change = as.character(Protein.change))

#excluding those with benign/likely benign medical significance
clinvar1<-clinvar%>%slice(1:57)%>%filter(grepl("benign", Clinical.significance..Last.reviewed.,fixed=T)!=T)

#gnomAD; Resulting data name: gnomAD1
gnomAD = read.csv('gnomAD_pax9.csv', header = TRUE)
# reset the data type in the features
gnomAD1 = gnomAD %>% select(rsID, Position, Consequence, Protein.Consequence, Transcript.Consequence, Annotation) %>%
  mutate(rsID = as.character(rsID)) %>% mutate(Consequence = as.character(Consequence)) %>% mutate(Protein.Consequence = as.character(Protein.Consequence)) %>%
  mutate(Transcript.Consequence = as.character(Transcript.Consequence)) %>% mutate(Annotation = as.character(Annotation))

#cBioPortal; Resulting data name: cancer1
cancer = read.csv('pax9_mutation_in_cancer.csv', header = TRUE)
cancer1 = cancer %>% select(dbSNP, Protein.Change, HGVSg, Start.Pos, Mutation.Type, Variant.Type) %>% mutate(Protein.Change = as.character(Protein.Change)) %>%
  mutate(HGVSg = as.character(HGVSg)) %>% mutate(Mutation.Type = as.character(Mutation.Type)) %>% mutate(Variant.Type = as.character(Variant.Type)) %>%
  mutate(dbSNP = as.character(dbSNP))

## 2nd step: get rid of rsIDs present in both negative (gnomAD) and positive controls (cBioPortal and Clincvariant) according to its allele frequency:
# those who are over 5% will be kept in the negative control (which is more likely to be benign) and excluded from the positive control,
# and vice versa for those < 5%.

#1. no rsID overlapped between the two positive controls
sum(clinvar1$`dbSNP ID` %in% cancer1$dbSNP)
#2.  examine overlapping between gnomAD and clinvar variant and between gnomAD and cancer variant
overlap_clinvar = gnomAD1$rsID %in% clinvar1$`dbSNP ID`
AF_clinvar = gnomAD[overlap_clinvar,]$Allele.Frequency
sum(AF_clinvar > 0.05)

overlap_cancer = gnomAD1$rsID %in% cancer1$dbSNP
AF_cancer = gnomAD[overlap_cancer,]$Allele.Frequency
sum(AF_clinvar > 0.05)
#2-1. since no overlapping rsID's allele frequency is larger than 5%, we are sure to exclude them from the gnomAD. Due to reason 1 and reason 2.1, we are able to process them like the following
overlap_pathogenic = as.logical(-1*(overlap_clinvar + overlap_cancer - 1))
gnomAD2 = data.frame(gnomAD1[overlap_pathogenic, ])
colnames(gnomAD2) = colnames(gnomAD1)

#3. Plus, we will exclude the rsID feature to avoid affecting random forest prediction
clinvar1 = clinvar1[, -1]
cancer1 = cancer1[, -1]
gnomAD2 = gnomAD2[, -1]

## 3rd step: classifying the mutation position (NM_006194.3)
# result: mutation_cancer1, mutation_clinvar1, mutation_gnomAD1
mutation_region = function(data){
  result = c()
  for(i in 1:length(data)){
    if(between(data[i], 37126773, 37131294) == TRUE){
      result[i] = '5 UTR'
      }else if(between(data[i], 37131295, 37131298) == TRUE){
        result[i] = 'Start codon region'
        }else if(between(data[i], 37135667, 37135806) == TRUE){
          result[i] = 'Exon 4'
          }else if(between(data[i], 37145403, 37145657) == TRUE){
            result[i] = 'Exon 5'
            }else if(between(data[i], 37132102, 37132728) == TRUE){
              if(between(data[i], 37132116, 37132286) == TRUE){
                result[i] = 'PAI subdomain'
                }else if(between(data[i], 37132341, 37132487) == TRUE){
                  result[i] = 'RED subdomain'
                  }else if(between(data[i], 37132599, 37132664) == TRUE){
                    result[i] = 'KDM5B'
                    }else(result[i] = 'Exon 3')
              }else(result[i] ='Intron')
  }
  return(result)
}

# Cancer Variant
cancer2 = cancer1 %>% mutate(gene_location = mutation_region(cancer1$Start.Pos))

# Clinvar Variant
clinvar2 = clinvar1 %>% mutate(gene_location = mutation_region(clinvar1$GRCh37Location))

# GnomAD Variant 
gnomAD2 = gnomAD2 %>% mutate(gene_location = mutation_region(gnomAD2$Position))

## 4th step: data processing of protein change and classification of conservative score using BLOSUM80 

#1. importing BLOSUM80 and create function of transforming amino acid between one-letter code and three-letter code 
library(peptider)
data(BLOSUM80)
one_to_three=function(x){
  one<- c("A", "C", "D", "E", "F" ,"G", "H", "I", "K", "L", "M" ,"N", "P" ,"Q" ,"R", "S" ,"T", "V", "W", "Y")
  three<-c("Ala", "Cys" ,"Asp", "Glu" ,"Phe" ,"Gly" ,"His" ,"Ile", "Lys" ,"Leu" ,"Met","Asn", "Pro" ,"Gln" ,"Arg" ,"Ser" ,"Thr", "Val" ,"Trp", "Tyr")
  index=match(x,one) 
  return(three[index]) 
}

BLOSUM80_2<-BLOSUM80%>%mutate(AA1=one_to_three(as.character(AA1)))%>%mutate(AA2=one_to_three(as.character(AA2)))

##CANCER
select_cancer<-cancer%>%select(Protein.Change, HGVSg, Start.Pos, End.Pos, Ref, Var)
clean_cancer<-select_cancer%>%mutate(copyHGVSg = as.character(HGVSg))%>%separate(copyHGVSg, into=c(NA, NA, "temporary", "AA2"))%>%separate(temporary, into=c(NA, "AA1"), sep=8)
BLOSUM_score_cancer = left_join(clean_cancer, BLOSUM80,  by = c("AA1", "AA2"))%>%mutate(Blosum2=ifelse(is.na(Blosum)==T,-6, Blosum))
cancer2$BLOSUM = BLOSUM_score_cancer$Blosum2

##CLINVAR
select_clinvar<-clinvar2%>%select(Name)
clin_var_aa<-select_clinvar%>%mutate(copyName = as.character(Name))%>%separate(copyName, into=c(NA, "temp1"), sep=":")%>%mutate(five.UTR=ifelse(substr(temp1, 1, 3)=="c.-", "UTR", NA))%>%mutate(premature_stop=ifelse(substr(temp1, 1,3)=="c.*", "PREMATURE_STOP", NA))%>%separate(temp1, into=c(NA, NA, "temp3",NA,"Protein.Change"))%>%mutate(indel=ifelse(nchar(temp3)>1,"indel", NA))%>%mutate(AA1=substr(Protein.Change,1,3))%>%mutate(AA2=ifelse(nchar(Protein.Change)>6, substr(Protein.Change, nchar(Protein.Change)-2, nchar(Protein.Change)),AA1))%>%unite(Protein.Effect,c(Protein.Change, five.UTR, indel, premature_stop),na.rm=TRUE, remove=TRUE)
BLOSUM_score_clinvar = left_join(clin_var_aa, BLOSUM80_2,  by = c("AA1","AA2"))%>%mutate(Blosum=ifelse(is.na(Blosum),ifelse(startsWith(Protein.Effect,"indel")|startsWith(Protein.Effect,"PREMATURE_STOP"),-6,0),Blosum))
clinvar2$BLOSUM = BLOSUM_score_clinvar$Blosum

##GNOMAD
protein_effect=function(x){
  cleanx=substr(x,3,nchar(x))
  start=substr(cleanx,1,3)
  end=substr(gsub('[0-9_]+', '', substr(cleanx,4,nchar(cleanx))),1,3)
  return (paste(start,end, sep="_"))
}

gnomad_aa<-gnomAD2%>%select(Annotation,Consequence)%>%mutate(Consequence=as.character(Consequence))%>%mutate(result=ifelse(Annotation=="5_prime_UTR_variant"|Annotation=="intron_variant"|Annotation=="splice_region_variant"|Annotation=="3_prime_UTR_variant" ,NA,protein_effect(Consequence)))%>%separate(result, into=c("AA1","AA2"))
BLOSUM_score_gnomAD = left_join(gnomad_aa, BLOSUM80_2, by=c("AA1","AA2"))%>%mutate(Blosum=ifelse(is.na(Blosum),ifelse(AA2=="Ter"|AA2=="",-6,0),Blosum))%>%mutate(Blosum=ifelse(is.na(Blosum),0,Blosum))
gnomAD2$BLOSUM = BLOSUM_score_gnomAD$Blosum


## 5th step: classification of mutation type and in frame/out of frame mutation 
#1. transform the feature into uniform
#2. identify the mutation type

## cancer variant 
Mutation.Type <- c("Splice_Region",'Missense_Mutation','Nonsense_Mutation','Frame_Shift_Del',"Fusion","Splice_Site")
cancer_translation<-c("Splice", "Missense", "Nonsense", "Out_Frame_Del","Fusion", "Splice")
cancer_trans<- data.frame(Mutation.Type, cancer_translation)

cancer_type<-cancer%>%select(Mutation.Type)
Mutation_type_cancer = left_join(cancer_type, cancer_trans,by="Mutation.Type")
cancer2$Mutation_Type = as.character(Mutation_type_cancer$cancer_translation)

# gnomAD variant 
Annotation<-c("5_prime_UTR_variant","intron_variant","splice_region_variant","missense_variant","synonymous_variant","stop_gained","inframe_deletion","inframe_insertion","start_lost","stop_lost","3_prime_UTR_variant")
gnomad_mutation_type<-c("5_prime_UTR_variant","Intron","Splice","Missense","Synonymous","Nonsense","inframe_deletion","inframe_insertion","start_lost","stop_lost","3_prime_UTR_variant")
gnomad_trans<-data.frame(Annotation, gnomad_mutation_type)

gnomad_type<-gnomAD2%>%select(Annotation)
Mutation_type_gnomAD = left_join(gnomad_type,gnomad_trans,by="Annotation")
gnomAD2$Mutation_Type = as.character(Mutation_type_gnomAD$gnomad_mutation_type)

#clinvar variant 
clinvar_VEP<-read.csv("Final_ClinVar_VEP.csv", header=T)
clinvar_VEP_select<-clinvar_VEP%>%select(X.Uploaded_variation,Consequence,Feature)%>%filter(Feature=="ENST00000361487.6")

Consequence<-c("upstream_gene_variant","5_prime_UTR_variant","non_coding_transcript_exon_variant","intron_variant,non_coding_transcript_variant","regulatory_region_variant","intron_variant","TF_binding_site_variant","downstream_gene_variant","start_lost,splice_region_variant","splice_region_variant,non_coding_transcript_exon_variant","splice_region_variant,synonymous_variant", "missense_variant", "synonymous_variant","stop_gained","frameshift_variant", "3_prime_UTR_variant" )
clin_var_translation<-c("5_prime_UTR_variant","5_prime_UTR_variant","5_prime_UTR_variant","Intron","regulatory_region_variant","Intron","TF_binding_site_variant", "3_prime_UTR_variant","start_lost","Splice","Splice","Missense","Synonymous","Nonsense","Out_Frame_Del","3_prime_UTR_variant")

clin_var_translation<-data.frame(Consequence, clin_var_translation)
Mutation_type_clinvar = left_join(clinvar_VEP_select,clin_var_translation)
clinvar2$Mutation_Type = as.character(Mutation_type_clinvar$clin_var_translation)

## 6th step: classification of inframe and out-of-frame mutation 
##Extension of BLOSUM (you don't need to run both, just one of these) 
inframe_clinvar = left_join(clin_var_aa, BLOSUM80_2,  by = c("AA1","AA2"))%>%mutate(Blosum=ifelse(is.na(Blosum),ifelse(startsWith(Protein.Effect,"indel")|startsWith(Protein.Effect,"PREMATURE_STOP"),-6,0),Blosum))%>%mutate(frame=ifelse(nchar(temp3)>1, "out_frame","in_frame"))
clinvar2$inframe = inframe_clinvar$frame

inframe_cancer = left_join(clean_cancer, BLOSUM80,  by = c("AA1", "AA2"))%>%mutate(Blosum2=ifelse(is.na(Blosum)==T,-6, Blosum))%>%mutate(Ref=as.character(Ref))%>%mutate(frame=ifelse(nchar(Ref)>1|AA1=="del","out_frame", "in_frame"))
cancer2$inframe = inframe_cancer$frame

inframe_gnomAD = left_join(gnomad_aa, BLOSUM80_2, by=c("AA1","AA2"))%>%mutate(Blosum=ifelse(is.na(Blosum),ifelse(AA2=="Ter"|AA2=="",-6,0),Blosum))%>%mutate(Blosum=ifelse(is.na(Blosum),0,Blosum))%>%mutate(Temp=Consequence)%>%separate(Temp, into=c("test1","test2"),sep="d")%>%mutate(frame=ifelse(is.na(test2),"in_frame", "out_frame"))
gnomAD2$inframe = inframe_gnomAD$frame


## 7th step: incorporating CADD score in all the data sets
CADD_clinvar = read.csv('Final_ClinVar_CADD.csv', header=T)
clinvar2$PHRED = CADD_clinvar$PHRED


# CADD's result is a little bit weird: 1. it doesn't have the result for two deletion (position 37145547, 37132259) and one fusion (position -1)
# also CADD has given two extra data (position: 37132258, 37145546). Thus we will exclude these two extra data and put average PHRED score for the missing data in cancer variant
# Cancer has two duplicate position: 37132272 , 37145590.
CADD_cancer = read.csv('Final_Cancer_CADD.csv', header = T)%>%mutate(Ref=as.character(REF))%>%mutate(Var=as.character(ALT))%>%rename(Start.Pos=POS)%>%select(-c(REF,ALT))

CADD_cancer<-CADD_cancer%>%mutate(Start.Pos=ifelse(nchar(Ref)>1, Start.Pos+1,Start.Pos))%>%mutate(Var=ifelse(nchar(Ref)>1,ifelse(substr(Var,2,nchar(Var))=="","-",substr(Var,2,nchar(Var))),Var))%>%mutate(Ref=ifelse(nchar(Ref)>1,substr(Ref,2,nchar(Ref)),Ref))

cancer3<-left_join(cancer, CADD_cancer, by=c("Start.Pos","Ref","Var"))%>%mutate(PHRED=ifelse(is.na(PHRED),max(PHRED,na.rm=T),PHRED))
cancer2$PHRED <- cancer3$PHRED


# gnomAD variant
CADD_gnomAD = read.csv('GnomAD_3_CADD.csv', header = T)
CADD_gnomAD<-CADD_gnomAD%>%rename(Reference=REF)%>%rename(Alternate=ALT)%>%rename(Position=POS)

gnomad_condensed<-gnomAD%>%select(Position,Consequence,Transcript.Consequence,Annotation,rsID,Reference,Alternate)
gnomAD_CADD<-left_join(gnomad_condensed,CADD_gnomAD, by=c("Position","Reference","Alternate"))


#Get the average score based on Annotation
Avg_CADD_Gnomad<-gnomAD_CADD%>%group_by(Annotation)%>%summarize(avg=mean(PHRED, na.rm=T))

result = left_join(gnomAD_CADD,Avg_CADD_Gnomad)%>% mutate(PHRED=ifelse(is.na(PHRED),avg,PHRED))

overlap_pathogenic = as.logical(-1*(overlap_clinvar + overlap_cancer - 1))
result = data.frame(result[overlap_pathogenic, ])
index = is.nan(result$PHRED)
index = result[as.logical(-1*index+1),]
average = mean(index$PHRED)
result = result %>% mutate(PHRED = ifelse(is.nan(PHRED), average, PHRED ))
gnomAD2$PHRED = result$PHRED

# 8th step: final data processing before sending to do random forest 

gnomAD2$phenotype = 'neutral'
clinvar2$phenotype = 'pathogenic'
cancer2$phenotype = 'pathogenic'

name = c('GRCh37Location', 'gene_location', 'BLOSUM', 'Mutation_Type', 'inframe', 'PHRED', 'phenotype')
gnomAD2 = gnomAD2 %>% select(Position, gene_location, BLOSUM, Mutation_Type, inframe, PHRED, phenotype) 
clinvar2 = clinvar2 %>% select(GRCh37Location, gene_location, BLOSUM, Mutation_Type, inframe, PHRED, phenotype)
cancer2 = cancer2 %>% select(Start.Pos, gene_location, BLOSUM, Mutation_Type, inframe, PHRED, phenotype)
colnames(gnomAD2) = name
colnames(cancer2) = name
gnomAD2 = gnomAD2 %>%mutate(GRCh37Location = as.numeric(GRCh37Location)) %>% mutate(gene_location = as.factor(gene_location)) %>%
  mutate(Mutation_Type = as.factor(Mutation_Type)) %>% mutate(inframe = as.factor(inframe)) %>% mutate(phenotype = as.factor(phenotype))
clinvar2 = clinvar2 %>%mutate(GRCh37Location = as.numeric(GRCh37Location)) %>% mutate(gene_location = as.factor(gene_location)) %>%
  mutate(Mutation_Type = as.factor(Mutation_Type)) %>% mutate(inframe = as.factor(inframe)) %>% mutate(phenotype = as.factor(phenotype))
cancer2 = cancer2 %>%mutate(GRCh37Location = as.numeric(GRCh37Location)) %>% mutate(gene_location = as.factor(gene_location)) %>%
  mutate(Mutation_Type = as.factor(Mutation_Type)) %>% mutate(inframe = as.factor(inframe)) %>% mutate(phenotype = as.factor(phenotype))


#9th step: 10-fold cross validation and RF
library(randomForest)
set.seed(40)
options(expressions = 5e5)
#pos/neg control

neg_control = rbind(clinvar2, cancer2) #112 pathogenic variants 

pos_control_index = sample(nrow(gnomAD2), size = nrow(neg_control), replace = FALSE)
pos_control = gnomAD2[pos_control_index,]

# take a fifth of each data set for testing data
neg_control_index = sample(nrow(neg_control), size = round(nrow(neg_control)*0.2), replace = FALSE)
pos_control_index1 = sample(nrow(pos_control), size = round(nrow(pos_control)*0.2), replace = FALSE)

neg_testing_data = neg_control[neg_control_index,]
neg_training_data = neg_control[-neg_control_index,]
  
pos_testing_data = pos_control[pos_control_index1,]
pos_training_data = pos_control[-pos_control_index1,]

# 10-fold cross validation 
 
training_data = rbind(pos_training_data, neg_training_data)
training_data = training_data[sample(nrow(training_data), size = nrow(training_data), replace = FALSE),]
nrow(training_data)*0.1 #equals 18
ten_fold_accuracy = c()
for(i in 1:10){
  Index = (1:18)+(i-1)*18
  train_data = training_data[-Index, ]
  testin_data = training_data[Index, ]
  cross_result = randomForest(phenotype ~., data = train_data, importance = T, ntree = 50,
                                   na.action = na.exclude)
  result = predict(cross_result, testin_data)
  
  ten_fold_accuracy[i] = sum(result == testin_data$phenotype)/nrow(testin_data)
}
#there's an NA result , in the testin_data = training_data[145:162,]
testin_data = training_data[145:162,]
train_data = training_data[-(145:162),]
cross_result = randomForest(phenotype ~., data = train_data, importance = T, ntree = 50,
                            na.action = na.exclude)
cross_result
result = predict(cross_result, testin_data)
# result[18] = NA, so we exclude it from data
ten_fold_accuracy[9] = sum(result[-18] == testin_data[-18]$phenotype)/nrow(testin_data[-18])
matrix(ten_fold_accuracy, nrow = 1, dimnames = list('ten_fold_accuracy'))
mean(ten_fold_accuracy,na.rm=T)
# the 10-fold cross validation shows that average error rate is about 18%

# random forest 
testin_data = rbind(neg_testing_data, pos_testing_data)
RF1 = randomForest(phenotype ~., data = training_data, importance = T, ntree = 20,
                                 na.action = na.exclude)
prediction_result = predict(RF1, testin_data)
RF1
importance (RF1)
varImpPlot(RF1, main="Variable Importance Plot for PAX9 Random Forest")

# comparing between RF prediction and random guessing 
RF_accuracy = sum(prediction_result == testin_data$phenotype)/nrow(testin_data)

guess = sample(c('pathogenic','neutral'), 
               size = nrow(testin_data ), replace = TRUE, prob = c(0.5, 0.5))
random_accuracy = sum(guess == testin_data $phenotype)/nrow(testin_data )

RF_accuracy > random_accuracy

# table of RF prediction 
cm = table(truth=testin_data$phenotype, prediction_result)
cm%>%addmargins()
accuracy=sum(cm[1,2],cm[2,1])/sum(cm)
precision=cm[1,2]/colSums(cm)[2]
sensitivity=cm[1,2]/colSums(cm)[2]
specificity=cm[2,1]/rowSums(cm)[2]
data.frame(accuracy,sensitivity,specificity,precision)
