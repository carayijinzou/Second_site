---
title: "R Notebook"
output: html_notebook
---
#Step 1: Reading and Cleaning the dataset
Reading in Datasets and loading packages
```{r}
library(tidyverse)

clinvar<-read.csv("clinvar_result.csv", header=T,na.strings="")%>%mutate_each(as.character())
cancer<-read.csv("pax9_mutation_in_cancer.csv", header=T,na.strings="")
gnomad<-read.csv("gnomAD_Grch37.csv", header=T,na.strings="")
```

Clean the Datasets
```{R}
#final few rows of clinvar do not have location of mutation, exclude those that are benign/likely benign
clinvar1<-clinvar%>%slice(1:57)%>%filter(grepl("benign", Clinical.significance..Last.reviewed.,fixed=T)!=T)%>%select(dbSNP.ID, GRCh37Location, Name, Protein.change, Clinical.significance..Last.reviewed.)


#turn into character instead of factor 
gnomAD1 = gnomad %>% select(rsID, Position, Consequence, Protein.Consequence, Transcript.Consequence, Annotation,Allele.Frequency) %>%
  mutate(rsID = as.character(rsID)) %>% mutate(Consequence = as.character(Consequence)) %>% mutate(Protein.Consequence = as.character(Protein.Consequence)) %>%
  mutate(Transcript.Consequence = as.character(Transcript.Consequence)) %>% mutate(Annotation = as.character(Annotation))

#turn into character instead of factor 
cancer1 = cancer %>% select(dbSNP, Protein.Change, HGVSg, Start.Pos, Mutation.Type, Variant.Type,Ref,Var) %>% mutate(Protein.Change = as.character(Protein.Change)) %>%
  mutate(HGVSg = as.character(HGVSg)) %>% mutate(Mutation.Type = as.character(Mutation.Type)) %>% mutate(Variant.Type = as.character(Variant.Type)) %>%
  mutate(dbSNP = as.character(dbSNP))%>%mutate(Ref = as.character(Ref))%>%mutate(Var = as.character(Var))

```

Get rid of Duplicates 
```{R}
#no duplicates in positives
inner_join(clinvar1,cancer1,by=c(dbSNP.ID="dbSNP"),na_matches="never")

#None of allele frequency over 0.05, therefore discard from gnomAD and keep in positive controls
inner_join(gnomAD1,cancer1, by=c(rsID="dbSNP"),na_matches="never")%>%filter(Allele.Frequency>0.05)
inner_join(gnomAD1,clinvar1, by=c(rsID="dbSNP.ID"),na_matches="never")%>%filter(Allele.Frequency>0.05)

#Before Duplicates
gnomAD1%>%nrow()

gnomAD2=anti_join(gnomAD1,cancer1, by=c(rsID="dbSNP"),na_matches="never")
gnomAD2=anti_join(gnomAD2,clinvar1, by=c(rsID="dbSNP.ID"),na_matches="never")

gnomAD2%>%nrow()

#get rid of rsID in all datasets
clinvar1=clinvar1%>%select(-dbSNP.ID)
cancer1=cancer1%>%select(-dbSNP)
gnomAD2=gnomAD2%>%select(-rsID)

#Resulting datasets: clinvar1, gnomAD2, cancer1
```

#Defining the Features

Feature 1: Mutation Location
```{R}
mutation_region = function(data){
  result = c()
  for(i in 1:length(data)){
	if(between(data[i], 37126773, 37131294) == TRUE){
  	result[i] = '5â€™ UTR'
  	}else if(between(data[i], 37131295, 37131298) == TRUE){
    	result[i] = 'Start codon region'
    	}else if(between(data[i], 37135667, 37135806) == TRUE){
      	result[i] = 'Exon 4'
      	}else if(between(data[i], 37145403, 37145657) == TRUE){
        	result[i] = 'Exon 5'
        	}else if(between(data[i], 37132102, 37132728) == TRUE){
          	if(between(data[i], 37132116, 37132286) == TRUE){
            	result[i] = 'PAI subdomain'
            	}else if(between(data[i], 37132341, 37132487) == TRUE){
              	result[i] = 'RED subdomain'
              	}else if(between(data[i], 37132599, 37132664) == TRUE){
                	result[i] = 'KDM5B'
                	}else(result[i] = 'Exon 3')
          	}else(result[i] ='Intron')
  }
  return(result)
}

```



```{R}
# Cancer Variant
cancer2 = cancer1 %>% mutate(gene_location = mutation_region(cancer1$Start.Pos))
# Clinvar Variant
clinvar2 = clinvar1 %>% mutate(gene_location = mutation_region(clinvar1$GRCh37Location))
# GnomAD Variant
gnomAD2 = gnomAD2 %>% mutate(gene_location = mutation_region(gnomAD2$Position))


```


Feature 2: BLOSUM score for amino acid conservativeness
```{R}
library(peptider)
one_to_three=function(x){
  one<- c("A", "C", "D", "E", "F" ,"G", "H", "I", "K", "L", "M" ,"N", "P" ,"Q" ,"R", "S" ,"T", "V", "W", "Y")
  three<-c("Ala", "Cys" ,"Asp", "Glu" ,"Phe" ,"Gly" ,"His" ,"Ile", "Lys" ,"Leu" ,"Met","Asn", "Pro" ,"Gln" ,"Arg" ,"Ser" ,"Thr", "Val" ,"Trp", "Tyr")
  index=match(x,one)
  return(three[index])
}

#create BLOSUM with three letter amino acid code
BLOSUM80_2<-BLOSUM80%>%mutate(AA1=one_to_three(as.character(AA1)))%>%mutate(AA2=one_to_three(as.character(AA2)))

```

```{R}
##CANCER
select_cancer<-cancer%>%select(Protein.Change, HGVSg, Start.Pos, End.Pos, Ref, Var)
clean_cancer<-select_cancer%>%mutate(copyHGVSg = as.character(HGVSg))%>%separate(copyHGVSg, into=c(NA, NA, "temporary", "AA2"))%>%separate(temporary, into=c(NA, "AA1"), sep=8)
BLOSUM_score_cancer = left_join(clean_cancer, BLOSUM80,  by = c("AA1", "AA2"))%>%mutate(Blosum2=ifelse(is.na(Blosum)==T,-6, Blosum))
cancer2$BLOSUM = BLOSUM_score_cancer$Blosum2

##CLINVAR
select_clinvar<-clinvar2%>%select(Name)
clin_var_aa<-select_clinvar%>%mutate(copyName = as.character(Name))%>%separate(copyName, into=c(NA, "temp1"), sep=":")%>%mutate(five.UTR=ifelse(substr(temp1, 1, 3)=="c.-", "UTR", NA))%>%mutate(premature_stop=ifelse(substr(temp1, 1,3)=="c.*", "PREMATURE_STOP", NA))%>%separate(temp1, into=c(NA, NA, "temp3",NA,"Protein.Change"))%>%mutate(indel=ifelse(nchar(temp3)>1,"indel", NA))%>%mutate(AA1=substr(Protein.Change,1,3))%>%mutate(AA2=ifelse(nchar(Protein.Change)>6, substr(Protein.Change, nchar(Protein.Change)-2, nchar(Protein.Change)),AA1))%>%unite(Protein.Effect,c(Protein.Change, five.UTR, indel, premature_stop),na.rm=TRUE, remove=TRUE)
BLOSUM_score_clinvar = left_join(clin_var_aa, BLOSUM80_2,  by = c("AA1","AA2"))%>%mutate(Blosum=ifelse(is.na(Blosum),ifelse(startsWith(Protein.Effect,"indel")|startsWith(Protein.Effect,"PREMATURE_STOP"),-6,0),Blosum))
clinvar2$BLOSUM = BLOSUM_score_clinvar$Blosum

##GNOMAD
protein_effect=function(x){
  cleanx=substr(x,3,nchar(x))
  start=substr(cleanx,1,3)
  end=substr(gsub('[0-9_]+', '', substr(cleanx,4,nchar(cleanx))),1,3)
  return (paste(start,end, sep="_"))
}

gnomad_aa<-gnomAD2%>%select(Annotation,Consequence)%>%mutate(Consequence=as.character(Consequence))%>%mutate(result=ifelse(Annotation=="5_prime_UTR_variant"|Annotation=="intron_variant"|Annotation=="splice_region_variant"|Annotation=="3_prime_UTR_variant" ,NA,protein_effect(Consequence)))%>%separate(result, into=c("AA1","AA2"))
BLOSUM_score_gnomAD = left_join(gnomad_aa, BLOSUM80_2, by=c("AA1","AA2"))%>%mutate(Blosum=ifelse(is.na(Blosum),ifelse(AA2=="Ter"|AA2=="",-6,0),Blosum))%>%mutate(Blosum=ifelse(is.na(Blosum),0,Blosum))
gnomAD2$BLOSUM = BLOSUM_score_gnomAD$Blosum

```


Feature 3: Mutation Type 
The mutation type was called different names in the dataset. This step was used to make this feature uniform and extract the mutation type from each of the datasets. 
```{R}
## cancer variant
Mutation.Type <- c("Splice_Region",'Missense_Mutation','Nonsense_Mutation','Frame_Shift_Del',"Fusion","Splice_Site")
cancer_translation<-c("Splice", "Missense", "Nonsense", "Out_Frame_Del","Fusion", "Splice")
cancer_trans<- data.frame(Mutation.Type, cancer_translation)
cancer_type<-cancer%>%select(Mutation.Type)
Mutation_type_cancer = left_join(cancer_type, cancer_trans,by="Mutation.Type")
cancer2$Mutation_Type = as.character(Mutation_type_cancer$cancer_translation)



# gnomAD variant
Annotation<-c("5_prime_UTR_variant","intron_variant","splice_region_variant","missense_variant","synonymous_variant","stop_gained","inframe_deletion","inframe_insertion","start_lost","stop_lost","3_prime_UTR_variant")
gnomad_mutation_type<-c("5_prime_UTR_variant","Intron","Splice","Missense","Synonymous","Nonsense","inframe_deletion","inframe_insertion","start_lost","stop_lost","3_prime_UTR_variant")
gnomad_trans<-data.frame(Annotation, gnomad_mutation_type)
gnomad_type<-gnomAD2%>%select(Annotation)
Mutation_type_gnomAD = left_join(gnomad_type,gnomad_trans,by="Annotation")
gnomAD2$Mutation_Type = as.character(Mutation_type_gnomAD$gnomad_mutation_type)




#The original dataset for clinvar did not have this feature, therefore the coordinates of the mutation were used and inputted in VEP from ensemble. 

#clinvar variant
clinvar_VEP<-read.csv("Final_ClinVar_VEP.csv", header=T)
clinvar_VEP_select<-clinvar_VEP%>%select(X.Uploaded_variation,Consequence,Feature)%>%filter(Feature=="ENST00000361487.6")
Consequence<-c("upstream_gene_variant","5_prime_UTR_variant","non_coding_transcript_exon_variant","intron_variant,non_coding_transcript_variant","regulatory_region_variant","intron_variant","TF_binding_site_variant","downstream_gene_variant","start_lost,splice_region_variant","splice_region_variant,non_coding_transcript_exon_variant","splice_region_variant,synonymous_variant", "missense_variant", "synonymous_variant","stop_gained","frameshift_variant", "3_prime_UTR_variant" )
clin_var_translation<-c("5_prime_UTR_variant","5_prime_UTR_variant","5_prime_UTR_variant","Intron","regulatory_region_variant","Intron","TF_binding_site_variant", "3_prime_UTR_variant","start_lost","Splice","Splice","Missense","Synonymous","Nonsense","Out_Frame_Del","3_prime_UTR_variant")
clin_var_translation<-data.frame(Consequence, clin_var_translation)
Mutation_type_clinvar = left_join(clinvar_VEP_select,clin_var_translation)
clinvar2$Mutation_Type = as.character(Mutation_type_clinvar$clin_var_translation)

```
Feature 4: In frame or Out of frame Mutation 
```{R}
#Clinvar
inframe_clinvar = left_join(clin_var_aa, BLOSUM80_2,  by = c("AA1","AA2"))%>%mutate(Blosum=ifelse(is.na(Blosum),ifelse(startsWith(Protein.Effect,"indel")|startsWith(Protein.Effect,"PREMATURE_STOP"),-6,0),Blosum))%>%mutate(frame=ifelse(nchar(temp3)>1, "out_frame","in_frame"))
clinvar2$inframe = inframe_clinvar$frame

#Cancer
inframe_cancer = left_join(clean_cancer, BLOSUM80,  by = c("AA1", "AA2"))%>%mutate(Blosum2=ifelse(is.na(Blosum)==T,-6, Blosum))%>%mutate(Ref=as.character(Ref))%>%mutate(frame=ifelse(nchar(Ref)>1|AA1=="del","out_frame", "in_frame"))
cancer2$inframe = inframe_cancer$frame

#GnomAD
inframe_gnomAD = left_join(gnomad_aa, BLOSUM80_2, by=c("AA1","AA2"))%>%mutate(Blosum=ifelse(is.na(Blosum),ifelse(AA2=="Ter"|AA2=="",-6,0),Blosum))%>%mutate(Blosum=ifelse(is.na(Blosum),0,Blosum))%>%mutate(Temp=Consequence)%>%separate(Temp, into=c("test1","test2"),sep="d")%>%mutate(frame=ifelse(is.na(test2),"in_frame", "out_frame"))
gnomAD2$inframe = inframe_gnomAD$frame

```

Feature 5: CADD score
The CADD score obtained by first obtaining a VCF file from VEP by inputting variant coordinates. This VCF file was then submitted to CADD. 
```{R}
#Clinvar
CADD_clinvar = read.csv('Final_ClinVar_CADD.csv', header=T)
clinvar2$PHRED = CADD_clinvar$PHRED

#Cancer variant
CADD_cancer = read.csv('Final_Cancer_CADD.csv', header = T)%>%mutate(Ref=as.character(REF))%>%mutate(Var=as.character(ALT))%>%rename(Start.Pos=POS)%>%select(-c(REF,ALT))
CADD_cancer<-CADD_cancer%>%mutate(Start.Pos=ifelse(nchar(Ref)>1, Start.Pos+1,Start.Pos))%>%mutate(Var=ifelse(nchar(Ref)>1,ifelse(substr(Var,2,nchar(Var))=="","-",substr(Var,2,nchar(Var))),Var))%>%mutate(Ref=ifelse(nchar(Ref)>1,substr(Ref,2,nchar(Ref)),Ref))
cancer3<-left_join(cancer, CADD_cancer, by=c("Start.Pos","Ref","Var"))%>%mutate(PHRED=ifelse(is.na(PHRED),max(PHRED,na.rm=T),PHRED))
cancer2$PHRED <- cancer3$PHRED

# gnomAD variant
CADD_gnomAD = read.csv('GnomAD_3_CADD.csv', header = T)
CADD_gnomAD<-CADD_gnomAD%>%rename(Reference=REF)%>%rename(Alternate=ALT)%>%rename(Position=POS)


gnomad_condensed<-gnomad%>%select(Position,Consequence,Transcript.Consequence,Annotation,rsID,Reference,Alternate)
gnomAD_CADD<-left_join(gnomad_condensed,CADD_gnomAD, by=c("Position","Reference","Alternate"))


#Get the average score based on Annotation
Avg_CADD_Gnomad<-gnomAD_CADD%>%group_by(Annotation)%>%summarize(avg=mean(PHRED, na.rm=T))
result = left_join(gnomAD_CADD,Avg_CADD_Gnomad)%>% mutate(PHRED=ifelse(is.na(PHRED),avg,PHRED))
overlap_pathogenic = as.logical(-1*(overlap_clinvar + overlap_cancer - 1))
result = data.frame(result[overlap_pathogenic, ])
index = is.nan(result$PHRED)
index = result[as.logical(-1*index+1),]
average = mean(index$PHRED)
result = result %>% mutate(PHRED = ifelse(is.nan(PHRED), average, PHRED ))
gnomAD2$PHRED = result$PHRED

```
Final Processing
```{R}
gnomAD2$phenotype = 'neutral'
clinvar2$phenotype = 'pathogenic'
cancer2$phenotype = 'pathogenic'
name = c('GRCh37Location', 'gene_location', 'BLOSUM', 'Mutation_Type', 'inframe', 'PHRED', 'phenotype')
gnomAD2 = gnomAD2 %>% select(GRCh37Location, gene_location, BLOSUM, Mutation_Type, inframe, PHRED, phenotype)
clinvar2 = clinvar2 %>% select(GRCh37Location, gene_location, BLOSUM, Mutation_Type, inframe, PHRED, phenotype)
cancer2 = cancer2 %>% select(GRCh37Location, gene_location, BLOSUM, Mutation_Type, inframe, PHRED, phenotype)
colnames(gnomAD2) = name
colnames(cancer2) = name
gnomAD2 = gnomAD2 %>%mutate(GRCh37Location = as.numeric(GRCh37Location)) %>% mutate(gene_location = as.factor(gene_location)) %>%
  mutate(Mutation_Type = as.factor(Mutation_Type)) %>% mutate(inframe = as.factor(inframe)) %>% mutate(phenotype = as.factor(phenotype))
clinvar2 = clinvar2 %>%mutate(GRCh37Location = as.numeric(GRCh37Location)) %>% mutate(gene_location = as.factor(gene_location)) %>%
  mutate(Mutation_Type = as.factor(Mutation_Type)) %>% mutate(inframe = as.factor(inframe)) %>% mutate(phenotype = as.factor(phenotype))
cancer2 = cancer2 %>%mutate(GRCh37Location = as.numeric(GRCh37Location)) %>% mutate(gene_location = as.factor(gene_location)) %>%
  mutate(Mutation_Type = as.factor(Mutation_Type)) %>% mutate(inframe = as.factor(inframe)) %>% mutate(phenotype = as.factor(phenotype))

```


```{R}
library(randomForest)
set.seed(40)
options(expressions = 5e5)
#pos/neg control
neg_control = rbind(clinvar2, cancer2) #112 pathogenic variants
pos_control_index = sample(nrow(gnomAD2), size = nrow(neg_control), replace = FALSE)
pos_control = gnomAD2[pos_control_index,]
# take a fifth of each data set for testing data
neg_control_index = sample(nrow(neg_control), size = round(nrow(neg_control)*0.2), replace = FALSE)
pos_control_index1 = sample(nrow(pos_control), size = round(nrow(pos_control)*0.2), replace = FALSE)
neg_testing_data = neg_control[neg_control_index,]
neg_training_data = neg_control[-neg_control_index,]
 
pos_testing_data = pos_control[pos_control_index1,]
pos_training_data = pos_control[-pos_control_index1,]
# 10-fold cross validation
 
training_data = rbind(pos_training_data, neg_training_data)
training_data = training_data[sample(nrow(training_data), size = nrow(training_data), replace = FALSE),]
nrow(training_data)*0.1 #equals 18
ten_fold_accuracy = c()
for(i in 1:10){
  Index = (1:18)+(i-1)*18
  train_data = training_data[-Index, ]
  testin_data = training_data[Index, ]
  cross_result = randomForest(phenotype ~., data = train_data, importance = T, ntree = 50,
                               	na.action = na.exclude)
  result = predict(cross_result, testin_data)
 
  ten_fold_accuracy[i] = sum(result == testin_data$phenotype)/nrow(testin_data)
}
#there's an NA result , in the testin_data = training_data[145:162,]
testin_data = training_data[145:162,]
train_data = training_data[-(145:162),]
cross_result = randomForest(phenotype ~., data = train_data, importance = T, ntree = 50,
                        	na.action = na.exclude)
result = predict(cross_result, testin_data)
# result[18] = NA, so we exclude it from data
ten_fold_accuracy[9] = sum(result[-18] == testin_data[-18]$phenotype)/nrow(testin_data[-18])
matrix(ten_fold_accuracy, nrow = 1, dimnames = list('ten_fold_accuracy'))
mean(ten_fold_accuracy)
```

```{R}
# random forest
testin_data = rbind(neg_testing_data, pos_testing_data)
RF1 = randomForest(phenotype ~., data = training_data, importance = T, ntree = 20,
                             	na.action = na.exclude)
prediction_result = predict(RF1, testin_data )
RF1 
importance (RF1)
varImpPlot(RF1)

# comparing between RF prediction and random guessing 
RF_accuracy = sum(prediction_result == testin_data$phenotype)/nrow(testin_data )
guess = sample(c('pathogenic','neutral'),
           	size = nrow(testin_data ), replace = TRUE, prob = c(0.5, 0.5))
random_accuracy = sum(guess == testin_data$phenotype)/nrow(testin_data )
RF_accuracy > random_accuracy
# RF accuracy: 0.7272727 
# guessing accuracy: 0.4772727

# table of RF prediction 
cm = table(truth=testin_data$phenotype, prediction_result)
cm%>%addmargins()
accuracy=sum(cm[1,2],cm[2,1])/sum(cm)
precision=cm[1,2]/colSums(cm)[2]
sensitivity=cm[1,2]/colSums(cm)[2]
specificity=cm[2,1]/rowSums(cm)[2]
data.frame(accuracy,sensitivity,specificity,precision)

```

